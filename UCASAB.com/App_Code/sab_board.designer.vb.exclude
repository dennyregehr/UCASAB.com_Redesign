'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="sab_calendar")>  _
Partial Public Class sab_boardDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCalendar(instance As Calendar)
    End Sub
  Partial Private Sub UpdateCalendar(instance As Calendar)
    End Sub
  Partial Private Sub DeleteCalendar(instance As Calendar)
    End Sub
  Partial Private Sub InsertEventType(instance As EventType)
    End Sub
  Partial Private Sub UpdateEventType(instance As EventType)
    End Sub
  Partial Private Sub DeleteEventType(instance As EventType)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("sab_calendarConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Calendars() As System.Data.Linq.Table(Of Calendar)
		Get
			Return Me.GetTable(Of Calendar)
		End Get
	End Property
	
	Public ReadOnly Property EventTypes() As System.Data.Linq.Table(Of EventType)
		Get
			Return Me.GetTable(Of EventType)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Calendar")>  _
Partial Public Class Calendar
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EventID As Integer
	
	Private _EventName As String
	
	Private _EventTypeID As System.Nullable(Of Integer)
	
	Private _Location As String
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _EventDescription As String
	
	Private _Notes As String
	
	Private _imageURL As String
	
	Private _website As String
	
	Private _videoURL As String
	
	Private _audioURL1 As String
	
	Private _audioURL2 As String
	
	Private _EventType As EntityRef(Of EventType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventIDChanged()
    End Sub
    Partial Private Sub OnEventNameChanging(value As String)
    End Sub
    Partial Private Sub OnEventNameChanged()
    End Sub
    Partial Private Sub OnEventTypeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEventTypeIDChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnEventDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnEventDescriptionChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnimageURLChanging(value As String)
    End Sub
    Partial Private Sub OnimageURLChanged()
    End Sub
    Partial Private Sub OnwebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnwebsiteChanged()
    End Sub
    Partial Private Sub OnvideoURLChanging(value As String)
    End Sub
    Partial Private Sub OnvideoURLChanged()
    End Sub
    Partial Private Sub OnaudioURL1Changing(value As String)
    End Sub
    Partial Private Sub OnaudioURL1Changed()
    End Sub
    Partial Private Sub OnaudioURL2Changing(value As String)
    End Sub
    Partial Private Sub OnaudioURL2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EventType = CType(Nothing, EntityRef(Of EventType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EventID() As Integer
		Get
			Return Me._EventID
		End Get
		Set
			If ((Me._EventID = value)  _
						= false) Then
				Me.OnEventIDChanging(value)
				Me.SendPropertyChanging
				Me._EventID = value
				Me.SendPropertyChanged("EventID")
				Me.OnEventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventName", DbType:="NVarChar(255)")>  _
	Public Property EventName() As String
		Get
			Return Me._EventName
		End Get
		Set
			If (String.Equals(Me._EventName, value) = false) Then
				Me.OnEventNameChanging(value)
				Me.SendPropertyChanging
				Me._EventName = value
				Me.SendPropertyChanged("EventName")
				Me.OnEventNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventTypeID", DbType:="Int")>  _
	Public Property EventTypeID() As System.Nullable(Of Integer)
		Get
			Return Me._EventTypeID
		End Get
		Set
			If (Me._EventTypeID.Equals(value) = false) Then
				If Me._EventType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._EventTypeID = value
				Me.SendPropertyChanged("EventTypeID")
				Me.OnEventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(255)")>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventDescription", DbType:="NVarChar(MAX)")>  _
	Public Property EventDescription() As String
		Get
			Return Me._EventDescription
		End Get
		Set
			If (String.Equals(Me._EventDescription, value) = false) Then
				Me.OnEventDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._EventDescription = value
				Me.SendPropertyChanged("EventDescription")
				Me.OnEventDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(MAX)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_imageURL", DbType:="NVarChar(255)")>  _
	Public Property imageURL() As String
		Get
			Return Me._imageURL
		End Get
		Set
			If (String.Equals(Me._imageURL, value) = false) Then
				Me.OnimageURLChanging(value)
				Me.SendPropertyChanging
				Me._imageURL = value
				Me.SendPropertyChanged("imageURL")
				Me.OnimageURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_website", DbType:="NVarChar(100)")>  _
	Public Property website() As String
		Get
			Return Me._website
		End Get
		Set
			If (String.Equals(Me._website, value) = false) Then
				Me.OnwebsiteChanging(value)
				Me.SendPropertyChanging
				Me._website = value
				Me.SendPropertyChanged("website")
				Me.OnwebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_videoURL", DbType:="NVarChar(255)")>  _
	Public Property videoURL() As String
		Get
			Return Me._videoURL
		End Get
		Set
			If (String.Equals(Me._videoURL, value) = false) Then
				Me.OnvideoURLChanging(value)
				Me.SendPropertyChanging
				Me._videoURL = value
				Me.SendPropertyChanged("videoURL")
				Me.OnvideoURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_audioURL1", DbType:="NVarChar(255)")>  _
	Public Property audioURL1() As String
		Get
			Return Me._audioURL1
		End Get
		Set
			If (String.Equals(Me._audioURL1, value) = false) Then
				Me.OnaudioURL1Changing(value)
				Me.SendPropertyChanging
				Me._audioURL1 = value
				Me.SendPropertyChanged("audioURL1")
				Me.OnaudioURL1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_audioURL2", DbType:="NVarChar(255)")>  _
	Public Property audioURL2() As String
		Get
			Return Me._audioURL2
		End Get
		Set
			If (String.Equals(Me._audioURL2, value) = false) Then
				Me.OnaudioURL2Changing(value)
				Me.SendPropertyChanging
				Me._audioURL2 = value
				Me.SendPropertyChanged("audioURL2")
				Me.OnaudioURL2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EventType_Calendar", Storage:="_EventType", ThisKey:="EventTypeID", OtherKey:="eventTypeID", IsForeignKey:=true)>  _
	Public Property EventType() As EventType
		Get
			Return Me._EventType.Entity
		End Get
		Set
			Dim previousValue As EventType = Me._EventType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EventType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EventType.Entity = Nothing
					previousValue.Calendars.Remove(Me)
				End If
				Me._EventType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Calendars.Add(Me)
					Me._EventTypeID = value.eventTypeID
				Else
					Me._EventTypeID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("EventType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EventType")>  _
Partial Public Class EventType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _eventTypeID As Integer
	
	Private _Description As String
	
	Private _Calendars As EntitySet(Of Calendar)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OneventTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OneventTypeIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Calendars = New EntitySet(Of Calendar)(AddressOf Me.attach_Calendars, AddressOf Me.detach_Calendars)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_eventTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property eventTypeID() As Integer
		Get
			Return Me._eventTypeID
		End Get
		Set
			If ((Me._eventTypeID = value)  _
						= false) Then
				Me.OneventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._eventTypeID = value
				Me.SendPropertyChanged("eventTypeID")
				Me.OneventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(100)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EventType_Calendar", Storage:="_Calendars", ThisKey:="eventTypeID", OtherKey:="EventTypeID")>  _
	Public Property Calendars() As EntitySet(Of Calendar)
		Get
			Return Me._Calendars
		End Get
		Set
			Me._Calendars.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Calendars(ByVal entity As Calendar)
		Me.SendPropertyChanging
		entity.EventType = Me
	End Sub
	
	Private Sub detach_Calendars(ByVal entity As Calendar)
		Me.SendPropertyChanging
		entity.EventType = Nothing
	End Sub
End Class
