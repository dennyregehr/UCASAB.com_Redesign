'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="sab_calendar")>  _
Partial Public Class sab_calendarDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertExecBoard(instance As ExecBoard)
    End Sub
  Partial Private Sub UpdateExecBoard(instance As ExecBoard)
    End Sub
  Partial Private Sub DeleteExecBoard(instance As ExecBoard)
    End Sub
  Partial Private Sub InsertExecPosition(instance As ExecPosition)
    End Sub
  Partial Private Sub UpdateExecPosition(instance As ExecPosition)
    End Sub
  Partial Private Sub DeleteExecPosition(instance As ExecPosition)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("sab_calendarConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ExecBoards() As System.Data.Linq.Table(Of ExecBoard)
		Get
			Return Me.GetTable(Of ExecBoard)
		End Get
	End Property
	
	Public ReadOnly Property ExecPositions() As System.Data.Linq.Table(Of ExecPosition)
		Get
			Return Me.GetTable(Of ExecPosition)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ExecBoard")>  _
Partial Public Class ExecBoard
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _execID As Integer
	
	Private _fname As String
	
	Private _lname As String
	
	Private _email As String
	
	Private _phone1 As String
	
	Private _phone2 As String
	
	Private _position As System.Nullable(Of Short)
	
	Private _photoURL As String
	
	Private _serviceDates As String
	
	Private _active As Boolean
	
	Private _ExecPosition As EntityRef(Of ExecPosition)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnexecIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnexecIDChanged()
    End Sub
    Partial Private Sub OnfnameChanging(value As String)
    End Sub
    Partial Private Sub OnfnameChanged()
    End Sub
    Partial Private Sub OnlnameChanging(value As String)
    End Sub
    Partial Private Sub OnlnameChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub Onphone1Changing(value As String)
    End Sub
    Partial Private Sub Onphone1Changed()
    End Sub
    Partial Private Sub Onphone2Changing(value As String)
    End Sub
    Partial Private Sub Onphone2Changed()
    End Sub
    Partial Private Sub OnpositionChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnpositionChanged()
    End Sub
    Partial Private Sub OnphotoURLChanging(value As String)
    End Sub
    Partial Private Sub OnphotoURLChanged()
    End Sub
    Partial Private Sub OnserviceDatesChanging(value As String)
    End Sub
    Partial Private Sub OnserviceDatesChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ExecPosition = CType(Nothing, EntityRef(Of ExecPosition))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_execID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property execID() As Integer
		Get
			Return Me._execID
		End Get
		Set
			If ((Me._execID = value)  _
						= false) Then
				Me.OnexecIDChanging(value)
				Me.SendPropertyChanging
				Me._execID = value
				Me.SendPropertyChanged("execID")
				Me.OnexecIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fname", DbType:="NVarChar(50)")>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me.OnfnameChanging(value)
				Me.SendPropertyChanging
				Me._fname = value
				Me.SendPropertyChanged("fname")
				Me.OnfnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lname", DbType:="NVarChar(50)")>  _
	Public Property lname() As String
		Get
			Return Me._lname
		End Get
		Set
			If (String.Equals(Me._lname, value) = false) Then
				Me.OnlnameChanging(value)
				Me.SendPropertyChanging
				Me._lname = value
				Me.SendPropertyChanged("lname")
				Me.OnlnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="NVarChar(100)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone1", DbType:="NVarChar(20)")>  _
	Public Property phone1() As String
		Get
			Return Me._phone1
		End Get
		Set
			If (String.Equals(Me._phone1, value) = false) Then
				Me.Onphone1Changing(value)
				Me.SendPropertyChanging
				Me._phone1 = value
				Me.SendPropertyChanged("phone1")
				Me.Onphone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone2", DbType:="NVarChar(20)")>  _
	Public Property phone2() As String
		Get
			Return Me._phone2
		End Get
		Set
			If (String.Equals(Me._phone2, value) = false) Then
				Me.Onphone2Changing(value)
				Me.SendPropertyChanging
				Me._phone2 = value
				Me.SendPropertyChanged("phone2")
				Me.Onphone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_position", DbType:="SmallInt")>  _
	Public Property position() As System.Nullable(Of Short)
		Get
			Return Me._position
		End Get
		Set
			If (Me._position.Equals(value) = false) Then
				If Me._ExecPosition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpositionChanging(value)
				Me.SendPropertyChanging
				Me._position = value
				Me.SendPropertyChanged("position")
				Me.OnpositionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_photoURL", DbType:="NVarChar(255)")>  _
	Public Property photoURL() As String
		Get
			Return Me._photoURL
		End Get
		Set
			If (String.Equals(Me._photoURL, value) = false) Then
				Me.OnphotoURLChanging(value)
				Me.SendPropertyChanging
				Me._photoURL = value
				Me.SendPropertyChanged("photoURL")
				Me.OnphotoURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serviceDates", DbType:="NVarChar(50)")>  _
	Public Property serviceDates() As String
		Get
			Return Me._serviceDates
		End Get
		Set
			If (String.Equals(Me._serviceDates, value) = false) Then
				Me.OnserviceDatesChanging(value)
				Me.SendPropertyChanging
				Me._serviceDates = value
				Me.SendPropertyChanged("serviceDates")
				Me.OnserviceDatesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="Bit NOT NULL")>  _
	Public Property active() As Boolean
		Get
			Return Me._active
		End Get
		Set
			If ((Me._active = value)  _
						= false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExecPosition_ExecBoard", Storage:="_ExecPosition", ThisKey:="position", OtherKey:="execPositionID", IsForeignKey:=true)>  _
	Public Property ExecPosition() As ExecPosition
		Get
			Return Me._ExecPosition.Entity
		End Get
		Set
			Dim previousValue As ExecPosition = Me._ExecPosition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExecPosition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExecPosition.Entity = Nothing
					previousValue.ExecBoards.Remove(Me)
				End If
				Me._ExecPosition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ExecBoards.Add(Me)
					Me._position = value.execPositionID
				Else
					Me._position = CType(Nothing, Nullable(Of Short))
				End If
				Me.SendPropertyChanged("ExecPosition")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ExecPosition")>  _
Partial Public Class ExecPosition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _execPositionID As Short
	
	Private _Position As String
	
	Private _RelevanceOrder As System.Nullable(Of Short)
	
	Private _OrderForExecBoardPage As System.Nullable(Of Short)
	
	Private _Active As Boolean
	
	Private _Description As String
	
	Private _ExecBoards As EntitySet(Of ExecBoard)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnexecPositionIDChanging(value As Short)
    End Sub
    Partial Private Sub OnexecPositionIDChanged()
    End Sub
    Partial Private Sub OnPositionChanging(value As String)
    End Sub
    Partial Private Sub OnPositionChanged()
    End Sub
    Partial Private Sub OnRelevanceOrderChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnRelevanceOrderChanged()
    End Sub
    Partial Private Sub OnOrderForExecBoardPageChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnOrderForExecBoardPageChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ExecBoards = New EntitySet(Of ExecBoard)(AddressOf Me.attach_ExecBoards, AddressOf Me.detach_ExecBoards)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_execPositionID", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property execPositionID() As Short
		Get
			Return Me._execPositionID
		End Get
		Set
			If ((Me._execPositionID = value)  _
						= false) Then
				Me.OnexecPositionIDChanging(value)
				Me.SendPropertyChanging
				Me._execPositionID = value
				Me.SendPropertyChanged("execPositionID")
				Me.OnexecPositionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Position", DbType:="NVarChar(100)")>  _
	Public Property Position() As String
		Get
			Return Me._Position
		End Get
		Set
			If (String.Equals(Me._Position, value) = false) Then
				Me.OnPositionChanging(value)
				Me.SendPropertyChanging
				Me._Position = value
				Me.SendPropertyChanged("Position")
				Me.OnPositionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RelevanceOrder", DbType:="SmallInt")>  _
	Public Property RelevanceOrder() As System.Nullable(Of Short)
		Get
			Return Me._RelevanceOrder
		End Get
		Set
			If (Me._RelevanceOrder.Equals(value) = false) Then
				Me.OnRelevanceOrderChanging(value)
				Me.SendPropertyChanging
				Me._RelevanceOrder = value
				Me.SendPropertyChanged("RelevanceOrder")
				Me.OnRelevanceOrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderForExecBoardPage", DbType:="SmallInt")>  _
	Public Property OrderForExecBoardPage() As System.Nullable(Of Short)
		Get
			Return Me._OrderForExecBoardPage
		End Get
		Set
			If (Me._OrderForExecBoardPage.Equals(value) = false) Then
				Me.OnOrderForExecBoardPageChanging(value)
				Me.SendPropertyChanging
				Me._OrderForExecBoardPage = value
				Me.SendPropertyChanged("OrderForExecBoardPage")
				Me.OnOrderForExecBoardPageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit NOT NULL")>  _
	Public Property Active() As Boolean
		Get
			Return Me._Active
		End Get
		Set
			If ((Me._Active = value)  _
						= false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ExecPosition_ExecBoard", Storage:="_ExecBoards", ThisKey:="execPositionID", OtherKey:="position")>  _
	Public Property ExecBoards() As EntitySet(Of ExecBoard)
		Get
			Return Me._ExecBoards
		End Get
		Set
			Me._ExecBoards.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ExecBoards(ByVal entity As ExecBoard)
		Me.SendPropertyChanging
		entity.ExecPosition = Me
	End Sub
	
	Private Sub detach_ExecBoards(ByVal entity As ExecBoard)
		Me.SendPropertyChanging
		entity.ExecPosition = Nothing
	End Sub
End Class
